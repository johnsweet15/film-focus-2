{"ast":null,"code":"import axios from 'axios';\nimport appconfig from \"../config/appconfig\";\nimport { useRouter } from 'next/router';\nimport { message } from \"antd\"; // eslint-disable-next-line react-hooks/rules-of-hooks\n\nconst router = () => {\n  return useRouter();\n};\n\nclass GlobalService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: appconfig.tmdbEndpoint,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    this.service.interceptors.request.use(function (config) {\n      return config;\n    }, function (error) {\n      return Promise.reject(error);\n    });\n    console.log(this);\n    this.service.interceptors.response.use(function (response) {\n      console.log(this);\n      console.log(response);\n      return response;\n    }, function (error) {\n      console.log(this);\n      doThis();\n      return Promise.reject(error);\n    });\n\n    function doThis() {\n      this.callErrorHandler(error);\n    }\n  }\n\n  get(url, config) {\n    return new Promise(async (res, rej) => {\n      let response = await this.service.get(url, config);\n      res(response);\n    }).catch(error => {\n      var _error$response, _error$response$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error);\n    });\n  }\n\n  post(url, data, config) {\n    return new Promise(async (res, rej) => {\n      let response = await this.service.post(url, data, config);\n      res(response);\n    }).catch(error => {\n      var _error$response2, _error$response2$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error);\n    });\n  }\n\n  callErrorHandler(error) {\n    switch (error.status) {\n      case 401:\n        this.handle401(error);\n        break;\n\n      default:\n        this.handleDefault(error);\n        break;\n    }\n  }\n\n  handle401(error) {\n    console.log(error);\n    sessionStorage.clear();\n    router.push({\n      pathname: '/error',\n      query: {\n        error: error\n      }\n    });\n  }\n\n  handleDefault(error) {\n    console.log(error);\n  }\n\n}\n\nconst globalService = new GlobalService();\nexport default globalService;","map":{"version":3,"sources":["C:/Film_Focus_2/film-focus-2/src/services/globalService.js"],"names":["axios","appconfig","useRouter","message","router","GlobalService","constructor","service","create","baseURL","tmdbEndpoint","headers","interceptors","request","use","config","error","Promise","reject","console","log","response","doThis","callErrorHandler","get","url","res","rej","catch","data","post","status","handle401","handleDefault","sessionStorage","clear","push","pathname","query","globalService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwB,MAAxB,C,CAEA;;AACA,MAAMC,MAAM,GAAG,MAAM;AAAC,SAAOF,SAAS,EAAhB;AAAoB,CAA1C;;AAEA,MAAMG,aAAN,CAAoB;AAClBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAeP,KAAK,CAACQ,MAAN,CAAa;AAC1BC,MAAAA,OAAO,EAAER,SAAS,CAACS,YADO;AAE1BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFiB,KAAb,CAAf;AAOA,SAAKJ,OAAL,CAAaK,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CAAsC,UAASC,MAAT,EAAiB;AACrD,aAAOA,MAAP;AACD,KAFD,EAEG,UAASC,KAAT,EAAgB;AACjB,aAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,KAJD;AAKAG,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,SAAKb,OAAL,CAAaK,YAAb,CAA0BS,QAA1B,CAAmCP,GAAnC,CAAuC,UAASO,QAAT,EAAmB;AACxDF,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,aAAOA,QAAP;AACD,KAJD,EAIG,UAASL,KAAT,EAAgB;AACjBG,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAE,MAAAA,MAAM;AACN,aAAOL,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,KARD;;AASA,aAASM,MAAT,GAAkB;AAChB,WAAKC,gBAAL,CAAsBP,KAAtB;AACD;AACF;;AAEDQ,EAAAA,GAAG,CAACC,GAAD,EAAMV,MAAN,EAAc;AACf,WAAO,IAAIE,OAAJ,CAAY,OAAOS,GAAP,EAAYC,GAAZ,KAAoB;AACrC,UAAIN,QAAQ,GAAG,MAAM,KAAKd,OAAL,CAAaiB,GAAb,CAAiBC,GAAjB,EAAsBV,MAAtB,CAArB;AACAW,MAAAA,GAAG,CAACL,QAAD,CAAH;AACD,KAHM,EAGJO,KAHI,CAGGZ,KAAD,IAAW;AAAA;;AAClBb,MAAAA,OAAO,CAACa,KAAR,CAAcA,KAAd,aAAcA,KAAd,0CAAcA,KAAK,CAAEK,QAArB,4EAAc,gBAAiBQ,IAA/B,yDAAc,qBAAuBb,KAArC;AACD,KALM,CAAP;AAMD;;AAEDc,EAAAA,IAAI,CAACL,GAAD,EAAMI,IAAN,EAAYd,MAAZ,EAAoB;AACtB,WAAO,IAAIE,OAAJ,CAAY,OAAOS,GAAP,EAAYC,GAAZ,KAAoB;AACrC,UAAIN,QAAQ,GAAG,MAAM,KAAKd,OAAL,CAAauB,IAAb,CAAkBL,GAAlB,EAAuBI,IAAvB,EAA6Bd,MAA7B,CAArB;AACAW,MAAAA,GAAG,CAACL,QAAD,CAAH;AACD,KAHM,EAGJO,KAHI,CAGGZ,KAAD,IAAW;AAAA;;AAClBb,MAAAA,OAAO,CAACa,KAAR,CAAcA,KAAd,aAAcA,KAAd,2CAAcA,KAAK,CAAEK,QAArB,8EAAc,iBAAiBQ,IAA/B,0DAAc,sBAAuBb,KAArC;AACD,KALM,CAAP;AAMD;;AAEDO,EAAAA,gBAAgB,CAACP,KAAD,EAAQ;AACtB,YAAOA,KAAK,CAACe,MAAb;AACE,WAAK,GAAL;AACE,aAAKC,SAAL,CAAehB,KAAf;AACA;;AACF;AACE,aAAKiB,aAAL,CAAmBjB,KAAnB;AACA;AANJ;AAQD;;AAEDgB,EAAAA,SAAS,CAAChB,KAAD,EAAQ;AACfG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAkB,IAAAA,cAAc,CAACC,KAAf;AACA/B,IAAAA,MAAM,CAACgC,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAE,QADA;AAEVC,MAAAA,KAAK,EAAE;AACLtB,QAAAA,KAAK,EAAEA;AADF;AAFG,KAAZ;AAMD;;AAEDiB,EAAAA,aAAa,CAACjB,KAAD,EAAQ;AACnBG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACD;;AAvEiB;;AA0EpB,MAAMuB,aAAa,GAAG,IAAIlC,aAAJ,EAAtB;AACA,eAAekC,aAAf","sourcesContent":["import axios from 'axios';\r\nimport appconfig from \"../config/appconfig\";\r\nimport { useRouter } from 'next/router';\r\nimport { message } from \"antd\";\r\n\r\n// eslint-disable-next-line react-hooks/rules-of-hooks\r\nconst router = () => {return useRouter();}\r\n\r\nclass GlobalService {\r\n  constructor() {\r\n    this.service = axios.create({\r\n      baseURL: appconfig.tmdbEndpoint,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n\r\n    this.service.interceptors.request.use(function(config) {\r\n      return config;\r\n    }, function(error) {\r\n      return Promise.reject(error);\r\n    })\r\n    console.log(this)\r\n    this.service.interceptors.response.use(function(response) {\r\n      console.log(this)\r\n      console.log(response)\r\n      return response;\r\n    }, function(error) {\r\n      console.log(this)\r\n      doThis();\r\n      return Promise.reject(error);\r\n    })\r\n    function doThis() {\r\n      this.callErrorHandler(error)\r\n    }\r\n  }\r\n\r\n  get(url, config) {\r\n    return new Promise(async (res, rej) => {\r\n      let response = await this.service.get(url, config);\r\n      res(response);\r\n    }).catch((error) => {\r\n      message.error(error?.response?.data?.error);\r\n    });\r\n  }\r\n\r\n  post(url, data, config) {\r\n    return new Promise(async (res, rej) => {\r\n      let response = await this.service.post(url, data, config);\r\n      res(response);\r\n    }).catch((error) => {\r\n      message.error(error?.response?.data?.error);\r\n    });\r\n  }\r\n\r\n  callErrorHandler(error) {\r\n    switch(error.status) {\r\n      case 401:\r\n        this.handle401(error);\r\n        break;\r\n      default:\r\n        this.handleDefault(error);\r\n        break;\r\n    }\r\n  }\r\n\r\n  handle401(error) {\r\n    console.log(error);\r\n    sessionStorage.clear();\r\n    router.push({\r\n      pathname: '/error',\r\n      query: {\r\n        error: error\r\n      }\r\n    });\r\n  }\r\n\r\n  handleDefault(error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nconst globalService = new GlobalService();\r\nexport default globalService;"]},"metadata":{},"sourceType":"module"}