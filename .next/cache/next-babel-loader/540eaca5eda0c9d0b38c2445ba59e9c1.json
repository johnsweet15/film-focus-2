{"ast":null,"code":"import axios from 'axios';\nimport appconfig from \"../config/appconfig\";\nimport { message } from \"antd\";\n\nclass GlobalService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: appconfig.tmdbEndpoint,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    let _this = this;\n\n    this.service.interceptors.request.use(function (config) {\n      return config;\n    }, function (error) {\n      return Promise.reject(error);\n    });\n    this.service.interceptors.response.use(function (response) {\n      return response;\n    }, function (error) {\n      _this.callErrorHandler(error.response);\n\n      return Promise.reject(error);\n    });\n  }\n\n  get(url, config) {\n    return new Promise(async (res, rej) => {\n      let response = await this.service.get(url, config);\n      res(response);\n      rej(response);\n    }).catch(error => {\n      var _error$response, _error$response$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error);\n    });\n  }\n\n  post(url, data, config) {\n    return new Promise(async (res, rej) => {\n      let response = await this.service.post(url, data, config);\n      res(response);\n    }).catch(error => {\n      var _error$response2, _error$response2$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error);\n    });\n  }\n\n  callErrorHandler(error) {\n    switch (error.status) {\n      case 401:\n        this.handle401(error);\n        break;\n\n      default:\n        this.handleDefault(error);\n        break;\n    }\n  }\n\n  redirect(statusCode) {\n    console.log(`localhost:3000/error?status=${statusCode}`);\n    window.open(`localhost:3000/error?status=${statusCode}`, \"_self\");\n  }\n\n  handle401(error) {\n    console.log(error);\n    sessionStorage.clear();\n    this.redirect(error.status);\n  }\n\n  handleDefault(error) {\n    console.log(error);\n  }\n\n}\n\nconst globalService = new GlobalService();\nexport default globalService;","map":{"version":3,"sources":["C:/Film_Focus_2/film-focus-2/src/services/globalService.js"],"names":["axios","appconfig","message","GlobalService","constructor","service","create","baseURL","tmdbEndpoint","headers","_this","interceptors","request","use","config","error","Promise","reject","response","callErrorHandler","get","url","res","rej","catch","data","post","status","handle401","handleDefault","redirect","statusCode","console","log","window","open","sessionStorage","clear","globalService"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport appconfig from \"../config/appconfig\";\r\nimport { message } from \"antd\";\r\n\r\nclass GlobalService {\r\n  constructor() {\r\n    this.service = axios.create({\r\n      baseURL: appconfig.tmdbEndpoint,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n\r\n    let _this = this;\r\n    this.service.interceptors.request.use(function(config) {\r\n      return config;\r\n    }, function(error) {\r\n      return Promise.reject(error);\r\n    })\r\n\r\n    this.service.interceptors.response.use(function(response) {\r\n      return response;\r\n    }, function(error) {\r\n      _this.callErrorHandler(error.response)\r\n      return Promise.reject(error);\r\n    })\r\n  }\r\n\r\n  get(url, config) {\r\n    return new Promise(async (res, rej) => {\r\n      let response = await this.service.get(url, config);\r\n      res(response);\r\n      rej(response)\r\n    }).catch((error) => {\r\n      message.error(error?.response?.data?.error);\r\n    });\r\n  }\r\n\r\n  post(url, data, config) {\r\n    return new Promise(async (res, rej) => {\r\n      let response = await this.service.post(url, data, config);\r\n      res(response);\r\n    }).catch((error) => {\r\n      message.error(error?.response?.data?.error);\r\n    });\r\n  }\r\n\r\n  callErrorHandler(error) {\r\n    switch(error.status) {\r\n      case 401:\r\n        this.handle401(error);\r\n        break;\r\n      default:\r\n        this.handleDefault(error);\r\n        break;\r\n    }\r\n  }\r\n\r\n  redirect(statusCode) {\r\n    console.log(`localhost:3000/error?status=${statusCode}`)\r\n    window.open(`localhost:3000/error?status=${statusCode}`, \"_self\")\r\n  }\r\n\r\n  handle401(error) {\r\n    console.log(error);\r\n    sessionStorage.clear();\r\n    this.redirect(error.status);\r\n  }\r\n\r\n  handleDefault(error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nconst globalService = new GlobalService();\r\nexport default globalService;"]},"metadata":{},"sourceType":"module"}