{"ast":null,"code":"var _jsxFileName = \"C:\\\\Film_Focus_2\\\\film-focus-2\\\\src\\\\services\\\\globalService.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport appconfig from \"../config/appconfig\";\nimport { useRouter } from 'next/router';\nimport { message } from \"antd\"; // class GlobalService {\n//   constructor() {\n//     this.router = useRouter();\n//     this.service = axios.create({\n//       baseURL: appconfig.tmdbEndpoint,\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       }\n//     })\n//     this.service.interceptors.request.use(function(config) {\n//       return config;\n//     }, function(error) {\n//       return Promise.reject(error);\n//     })\n//     this.service.interceptors.response.use(function(response) {\n//       return response;\n//     }, function(error) {\n//       this.callErrorHandler(error)\n//       return Promise.reject(error);\n//     })\n//   }\n//   get(url, config) {\n//     return new Promise(async (res, rej) => {\n//       let response = await this.service.get(url, config);\n//       res(response);\n//     }).catch((error) => {\n//       message.error(error?.response?.data?.error);\n//     });\n//   }\n//   post(url, data, config) {\n//     return new Promise(async (res, rej) => {\n//       let response = await this.service.post(url, data, config);\n//       res(response);\n//     }).catch((error) => {\n//       message.error(error?.response?.data?.error);\n//     });\n//   }\n//   callErrorHandler(error) {\n//     switch(error.status) {\n//       case 401:\n//         this.handle401(error);\n//         break;\n//       default:\n//         this.handleDefault(error);\n//         break;\n//     }\n//   }\n//   handle401(error) {\n//     console.log(error);\n//     sessionStorage.clear();\n//     this.router.push({\n//       pathname: '/error',\n//       query: {\n//         error: error\n//       }\n//     });\n//   }\n//   handleDefault(error) {\n//     console.log(error)\n//   }\n// }\n// const globalService = new GlobalService();\n// export default globalService;\n\nfunction globalService(props) {\n  _s();\n\n  const {\n    0: a,\n    1: b\n  } = useState(null);\n  const router = useRouter();\n  const service = axios.create({\n    baseURL: appconfig.tmdbEndpoint,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  service.interceptors.request.use(function (config) {\n    return config;\n  }, function (error) {\n    return Promise.reject(error);\n  });\n  service.interceptors.response.use(function (response) {\n    return response;\n  }, function (error) {\n    this.callErrorHandler(error);\n    return Promise.reject(error);\n  });\n\n  function get(url, config) {\n    return new Promise(async (res, rej) => {\n      let response = await this.service.get(url, config);\n      res(response);\n    }).catch(error => {\n      var _error$response, _error$response$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error);\n    });\n  }\n\n  function post(url, data, config) {\n    return new Promise(async (res, rej) => {\n      let response = await this.service.post(url, data, config);\n      res(response);\n    }).catch(error => {\n      var _error$response2, _error$response2$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error);\n    });\n  }\n\n  function callErrorHandler(error) {\n    switch (error.status) {\n      case 401:\n        this.handle401(error);\n        break;\n\n      default:\n        this.handleDefault(error);\n        break;\n    }\n  }\n\n  function handle401(error) {\n    console.log(error);\n    sessionStorage.clear();\n    this.router.push({\n      pathname: '/error',\n      query: {\n        error: error\n      }\n    });\n  }\n\n  function handleDefault(error) {\n    console.log(error);\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 10\n    }\n  });\n}\n\n_s(globalService, \"S23l3ObO2bR4uBwnyIgnDvAVuRM=\", false, function () {\n  return [useRouter];\n});\n\nexport default globalService;","map":{"version":3,"sources":["C:/Film_Focus_2/film-focus-2/src/services/globalService.js"],"names":["React","useState","axios","appconfig","useRouter","message","globalService","props","a","b","router","service","create","baseURL","tmdbEndpoint","headers","interceptors","request","use","config","error","Promise","reject","response","callErrorHandler","get","url","res","rej","catch","data","post","status","handle401","handleDefault","console","log","sessionStorage","clear","push","pathname","query"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport appconfig from \"../config/appconfig\";\r\nimport { useRouter } from 'next/router';\r\nimport { message } from \"antd\";\r\n\r\n// class GlobalService {\r\n//   constructor() {\r\n//     this.router = useRouter();\r\n//     this.service = axios.create({\r\n//       baseURL: appconfig.tmdbEndpoint,\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\"\r\n//       }\r\n//     })\r\n\r\n//     this.service.interceptors.request.use(function(config) {\r\n//       return config;\r\n//     }, function(error) {\r\n//       return Promise.reject(error);\r\n//     })\r\n\r\n//     this.service.interceptors.response.use(function(response) {\r\n//       return response;\r\n//     }, function(error) {\r\n//       this.callErrorHandler(error)\r\n//       return Promise.reject(error);\r\n//     })\r\n//   }\r\n\r\n//   get(url, config) {\r\n//     return new Promise(async (res, rej) => {\r\n//       let response = await this.service.get(url, config);\r\n//       res(response);\r\n//     }).catch((error) => {\r\n//       message.error(error?.response?.data?.error);\r\n//     });\r\n//   }\r\n\r\n//   post(url, data, config) {\r\n//     return new Promise(async (res, rej) => {\r\n//       let response = await this.service.post(url, data, config);\r\n//       res(response);\r\n//     }).catch((error) => {\r\n//       message.error(error?.response?.data?.error);\r\n//     });\r\n//   }\r\n\r\n//   callErrorHandler(error) {\r\n//     switch(error.status) {\r\n//       case 401:\r\n//         this.handle401(error);\r\n//         break;\r\n//       default:\r\n//         this.handleDefault(error);\r\n//         break;\r\n//     }\r\n//   }\r\n\r\n//   handle401(error) {\r\n//     console.log(error);\r\n//     sessionStorage.clear();\r\n//     this.router.push({\r\n//       pathname: '/error',\r\n//       query: {\r\n//         error: error\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   handleDefault(error) {\r\n//     console.log(error)\r\n//   }\r\n// }\r\n\r\n// const globalService = new GlobalService();\r\n// export default globalService;\r\n\r\nfunction globalService(props) {\r\n  const [a,b] = useState(null)\r\n  const router = useRouter();\r\n  const service = axios.create({\r\n    baseURL: appconfig.tmdbEndpoint,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n\r\n  service.interceptors.request.use(function(config) {\r\n    return config;\r\n  }, function(error) {\r\n    return Promise.reject(error);\r\n  })\r\n\r\n  service.interceptors.response.use(function(response) {\r\n    return response;\r\n  }, function(error) {\r\n    this.callErrorHandler(error)\r\n    return Promise.reject(error);\r\n  })\r\n  \r\n  function get(url, config) {\r\n    return new Promise(async (res, rej) => {\r\n      let response = await this.service.get(url, config);\r\n      res(response);\r\n    }).catch((error) => {\r\n      message.error(error?.response?.data?.error);\r\n    });\r\n  }\r\n\r\n  function post(url, data, config) {\r\n    return new Promise(async (res, rej) => {\r\n      let response = await this.service.post(url, data, config);\r\n      res(response);\r\n    }).catch((error) => {\r\n      message.error(error?.response?.data?.error);\r\n    });\r\n  }\r\n\r\n  function callErrorHandler(error) {\r\n    switch(error.status) {\r\n      case 401:\r\n        this.handle401(error);\r\n        break;\r\n      default:\r\n        this.handleDefault(error);\r\n        break;\r\n    }\r\n  }\r\n\r\n  function handle401(error) {\r\n    console.log(error);\r\n    sessionStorage.clear();\r\n    this.router.push({\r\n      pathname: '/error',\r\n      query: {\r\n        error: error\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleDefault(error) {\r\n    console.log(error)\r\n  }\r\n\r\n  return <div></div>;\r\n}\r\n\r\nexport default globalService;"]},"metadata":{},"sourceType":"module"}